From maze.java

//	public boolean removeCreature(Creature c) {
//		boolean successfullyRemoved = false;
//		if (creatures.remove(c) ) {
//			successfullyRemoved = true;
//		}
//		return successfullyRemoved;
//	}

From MovingImage.java
//	public static char symbol = '?';


From DrawingSurface
//	private Heal heals;
//	private ArrayList<Creature> creatures;
//	private ArrayList<Enemy> enemies;

	public DrawingSurface(){
		// obstacles.add(new Rectangle(200,400,400,50));
		// obstacles.add(new Rectangle(0,250,100,50));
		// obstacles.add(new Rectangle(700,250,100,50));
		// obstacles.add(new Rectangle(375,300,50,100));
		// obstacles.add(new Rectangle(300,250,200,50));
		
		
		
		/*
		 * maze1 = new Maze(); maze0 = new Maze(); int w =10; maze1.addWall(new
		 * Rectangle(50,10, 700,w));
		 * 
		 * maze1.addWall(new Rectangle(200,150,400,w)); maze1.addWall(new
		 * Rectangle(600,150,w,70)); maze1.addWall(new Rectangle(700,150,w,300));
		 * maze1.addWall(new Rectangle(500,300,200,w)); maze1.addWall(new
		 * Rectangle(300,300,100,w)); maze1.addWall(new Rectangle(400,300,w,100));
		 * maze1.addWall(new Rectangle(400,400,200,w)); maze1.addCreature(new
		 * TimingTrap(loadImage("data//spike.png"), 100,50, 50, 50) );
		 * 
		 * 
		 * 
		 * 
		 * // horizontal lines maze0.addWall(new Rectangle(0,0,1000,WALL_THICKNESS ));
		 * maze0.addWall(new Rectangle(0,595,1000,WALL_THICKNESS )); maze0.addWall(new
		 * Rectangle(35, 35, 250, WALL_THICKNESS )); maze0.addWall(new Rectangle(315,
		 * 35, 200, WALL_THICKNESS )); maze0.addWall(new Rectangle(545, 35, 212,
		 * WALL_THICKNESS )); maze0.addWall(new Rectangle(580,200,220,WALL_THICKNESS ));
		 * maze0.addWall(new Rectangle(545, 235, 205, WALL_THICKNESS ));
		 * maze0.addWall(new Rectangle(545, 442, 300, WALL_THICKNESS ));
		 * maze0.addWall(new Rectangle(440,200,105,WALL_THICKNESS )); maze0.addWall(new
		 * Rectangle(440,235,105,WALL_THICKNESS )); maze0.addWall(new Rectangle(35, 563,
		 * 280, WALL_THICKNESS)); maze0.addWall(new Rectangle(345, 563, 200,
		 * WALL_THICKNESS)); maze0.addWall(new Rectangle(576, 563, 190,
		 * WALL_THICKNESS)); maze0.addWall(new Rectangle(70, 530, 500, WALL_THICKNESS));
		 * maze0.addWall(new Rectangle(600, 530, 200, WALL_THICKNESS));
		 * maze0.addWall(new Rectangle(105, 70, 50, WALL_THICKNESS)); maze0.addWall(new
		 * Rectangle(185, 70, 65, WALL_THICKNESS)); maze0.addWall(new Rectangle(77, 140,
		 * 140 , WALL_THICKNESS)); maze0.addWall(new Rectangle(140, 105, 140,
		 * WALL_THICKNESS )); maze0.addWall(new Rectangle(103, 175, 182, WALL_THICKNESS
		 * ));
		 * 
		 * // vertical lines maze0.addWall(new Rectangle(0,0,WALL_THICKNESS ,1000));
		 * maze0.addWall(new Rectangle(795,0,WALL_THICKNESS ,200)); maze0.addWall(new
		 * Rectangle(795,450,WALL_THICKNESS ,250)); maze0.addWall(new Rectangle(35, 35,
		 * WALL_THICKNESS , 430)); maze0.addWall(new Rectangle(35, 495, WALL_THICKNESS ,
		 * 68)); maze0.addWall(new Rectangle(750, 42, WALL_THICKNESS , 128));
		 * maze0.addWall(new Rectangle(545, 35, WALL_THICKNESS , 407));
		 * maze0.addWall(new Rectangle(750, 235, WALL_THICKNESS , 165));
		 * maze0.addWall(new Rectangle(508, 42, WALL_THICKNESS , 128));
		 * maze0.addWall(new Rectangle(315, 42, WALL_THICKNESS , 128));
		 * maze0.addWall(new Rectangle(278, 42, WALL_THICKNESS , 132));
		 * maze0.addWall(new Rectangle(70, 330, WALL_THICKNESS, 200)); maze0.addWall(new
		 * Rectangle(70, 70, WALL_THICKNESS, 230)); maze0.addWall(new Rectangle(105, 77,
		 * WALL_THICKNESS, 35));
		 * 
		 * // Timing Traps maze0.addCreature(new
		 * TimingTrap(loadImage("data//spike.png"), 285,50, 30, 25));
		 * maze0.addCreature(new TimingTrap(loadImage("data//spike.png"), 515,50, 30,
		 * 25)); maze0.addCreature(new TimingTrap(loadImage("data//spike.png"), 440,208,
		 * 30, 26)); maze0.addCreature(new TimingTrap(loadImage("data//spike.png"),
		 * 205,570, 30, 25)); maze0.addCreature(new
		 * TimingTrap(loadImage("data//spike.png"), 546,570, 30, 25));
		 * 
		 * // Abilities maze0.addAbility(new Heal(loadImage("data//heal.png"), 250, 250,
		 * 40, 60));
		 */
		 
	}
	
	//	public void spawnNewAbility() {
//		int x, y;
//		// x=x(Math.RANDOM); maybe i should just hard code the spots where the ability
//		// spawn
////		heals = new Heal(loadImage("data//heal.png"), 250, 250, 40, 60);
//
//	}

	public void spawnNewEnemy(Enemy enemy) {
		// enemies.add(new TimingTrap(loadImage("data//player.png"), 100,50, 50, 50) );
		// enemies.add(e);
	}
	
	public void spawnNewPlayer() {
		respawnCooldown = 60;
		player = new Player(loadImage("data//player.png"), 8, 10, 25, 25);
		// use forward slash for folders outside src I guess?
		//
		//
	}
	
	public void draw(){
//		else if(lives<=0) {
//		player.removeSelfFromMaze(thisMaze, 1);
//		fill(0);
//		this.rect(0,0, DRAWING_WIDTH, DRAWING_HEIGHT);
//		fill(255);
//		this.text("YOU DIED", DRAWING_WIDTH /2 -50,DRAWING_HEIGHT/2);
//		}

		
	}